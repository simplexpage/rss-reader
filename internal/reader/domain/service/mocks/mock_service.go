// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	validate "github.com/gookit/validate"
	form "github.com/simplexpage/rss-reader/internal/reader/delivery/reqresp/form"
	model "github.com/simplexpage/rss-reader/internal/reader/domain/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ParseUrls mocks base method.
func (m *MockService) ParseUrls(ctx context.Context, parseUrlsForm form.ParseUrlsForm) ([]model.Item, error, validate.Errors) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUrls", ctx, parseUrlsForm)
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(validate.Errors)
	return ret0, ret1, ret2
}

// ParseUrls indicates an expected call of ParseUrls.
func (mr *MockServiceMockRecorder) ParseUrls(ctx, parseUrlsForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUrls", reflect.TypeOf((*MockService)(nil).ParseUrls), ctx, parseUrlsForm)
}
