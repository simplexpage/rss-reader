// Code generated by MockGen. DO NOT EDIT.
// Source: api_parse_url.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/simplexpage/rss-reader/internal/reader/domain/model"
)

// MockAPIParseUrlService is a mock of APIParseUrlService interface.
type MockAPIParseUrlService struct {
	ctrl     *gomock.Controller
	recorder *MockAPIParseUrlServiceMockRecorder
}

// MockAPIParseUrlServiceMockRecorder is the mock recorder for MockAPIParseUrlService.
type MockAPIParseUrlServiceMockRecorder struct {
	mock *MockAPIParseUrlService
}

// NewMockAPIParseUrlService creates a new mock instance.
func NewMockAPIParseUrlService(ctrl *gomock.Controller) *MockAPIParseUrlService {
	mock := &MockAPIParseUrlService{ctrl: ctrl}
	mock.recorder = &MockAPIParseUrlServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIParseUrlService) EXPECT() *MockAPIParseUrlServiceMockRecorder {
	return m.recorder
}

// GetApiData mocks base method.
func (m *MockAPIParseUrlService) GetApiData(ctx context.Context, urls []string) ([]model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiData", ctx, urls)
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiData indicates an expected call of GetApiData.
func (mr *MockAPIParseUrlServiceMockRecorder) GetApiData(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiData", reflect.TypeOf((*MockAPIParseUrlService)(nil).GetApiData), ctx, urls)
}
